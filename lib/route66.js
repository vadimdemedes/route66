// Generated by CoffeeScript 1.3.3
var Route66, async, methods, toArray, url;

async = require('async');

url = require('url');

Route66 = function(req, res, next) {
  var functions, i, method, requestUrl, route, values, _i, _len, _ref;
  if (req.method === 'DELETE') {
    method = 'del';
  } else {
    method = req.method.toLowerCase();
  }
  _ref = Route66.routes[method];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    route = _ref[_i];
    requestUrl = req.url.replace(url.parse(req.url).search, '');
    if (route.regex.test(requestUrl)) {
      values = route.regex.exec(requestUrl).slice(1);
      i = 0;
      req.params = {};
      while (true) {
        if (i >= values.length) {
          break;
        }
        req.params[route.params[i]] = values[i];
        i++;
      }
      functions = route.functions;
      return async.forEachSeries(functions, function(fn, nextFn) {
        fn(req, res, nextFn);
        if (functions.length === 0) {
          return nextFn();
        }
      }, function(err) {
          if (err) next(err);
      });
    }
  }
  if (Route66.notFoundRoute) {
    return Route66.notFoundRoute(req, res);
  } else {
    return res.end("Could not " + req.method + " " + req.url);
  }
};

Route66.routes = {};

Route66.notFound = function(route) {
  return Route66.notFoundRoute = route;
};

Route66.addRoute = function(method, route, functions) {
  var params, result, routeClone;
  params = [];
  routeClone = route;
  while (true) {
    result = /\:([A-Za-z_]+)\/?/.exec(routeClone);
    if (result) {
      params.push(result.slice(1).toString());
      routeClone = routeClone.replace(/\:([A-Za-z_]+)\/?/, '');
    }
    if (!/\:([A-Za-z_]+)\/?/.test(routeClone)) {
      break;
    }
  }
  Route66.routes[method].push({
    route: route,
    regex: new RegExp('^' + route.replace(/\//g, '\\/').replace(/\:([A-Za-z_]+)(\?)?\/?/g, '$2([A-Za-z0-9@._-]+)$2') + '\\/?$'),
    params: params,
    functions: functions instanceof Array ? functions : toArray(functions).slice(1)
  });
  return Route66.sort();
};

toArray = function(object) {
  var item, items;
  items = [];
  for (item in object) {
    items.push(object[item]);
  }
  return items;
};

methods = ['get', 'post', 'patch', 'put', 'del', 'head', 'options'];

Route66.autosort = true;

Route66.sort = function() {
  var first, last, method, middle, route, sort, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref;
  if (!Route66.autosort) {
    return;
  }
  sort = function(a, b) {
    var aRegex, bRegex, numberOfParams, paramsIn;
    aRegex = a.regex.toString();
    bRegex = b.regex.toString();
    if (-1 < aRegex.indexOf('([A-Za-z0-9_-]+)')) {
      return true;
    } else if (-1 < bRegex.indexOf('([A-Za-z0-9_-]+)')) {
      return false;
    } else {
      numberOfParams = {
        a: 0,
        b: 0
      };
      while (true) {
        paramsIn = {
          a: true,
          b: true
        };
        if (/\:[A-Za-z0-9_]+/.test(a.route)) {
          numberOfParams.a++;
          a.route = a.route.replace(/\:[A-Za-z0-9_]+/, '');
        } else {
          paramsIn.a = false;
        }
        if (/\:[A-Za-z0-9_]+/.test(b.route)) {
          numberOfParams.b++;
          b.route = b.route.replace(/\:[A-Za-z0-9_]+/, '');
        } else {
          paramsIn.b = false;
        }
        if (!paramsIn.a && !paramsIn.b) {
          break;
        }
      }
      return numberOfParams.a > numberOfParams.b;
    }
  };
  for (_i = 0, _len = methods.length; _i < _len; _i++) {
    method = methods[_i];
    if (Route66.routes[method].length > 0) {
      first = [];
      middle = [];
      last = [];
      _ref = Route66.routes[method];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        route = _ref[_j];
        if (route.route === '/') {
          last.push(route);
        } else if (/\:[A-Za-z0-9_]+/.test(route.route)) {
          middle.push(route);
        } else {
          first.push(route);
        }
      }
      first.sort(sort);
      middle.sort(sort);
      for (_k = 0, _len2 = middle.length; _k < _len2; _k++) {
        route = middle[_k];
        first.push(route);
      }
      for (_l = 0, _len3 = last.length; _l < _len3; _l++) {
        route = last[_l];
        first.push(route);
      }
      Route66.routes[method] = first;
    }
  }
  return void 0;
};

methods.forEach(function(method) {
  Route66.routes[method] = [];
  return Route66[method] = function(route) {
    return Route66.addRoute(method, route, arguments);
  };
});

module.exports = Route66;
